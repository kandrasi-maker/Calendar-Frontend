const BoundaryModal = ({ onClose }) => {
        const [title, setTitle] = useState(''); const [date, setDate] = useState(new Date().toISOString().split('T')[0]); const [startTime, setStartTime] = useState('09:00'); const [endTime, setEndTime] = useState('10:00'); const [error, setError] = useState(''); const [isSuggesting, setIsSuggesting] = useState(false); const [isCreating, setIsCreating] = useState(false);
        const handleSubmit = async (e) => {
             e.preventDefault(); setError(''); if (!title || !date || !startTime || !endTime) { setError('All fields required.'); return; } const start = new Date(`${date}T${startTime}`), end = new Date(`${date}T${endTime}`); if (start >= end) { setError('End time must be after start.'); return; } if (processedEvents.some(event => (start < new Date(event.end.getTime() + BUFFER_MS)) && (new Date(end.getTime() + BUFFER_MS) > event.start))) { setError('Time is too close to an existing event (15 min buffer).'); return; } setIsCreating(true); await handleCreateBoundary({ title, start, end }); setIsCreating(false);
        };
        const handleSuggestTitle = async () => {
            setIsSuggesting(true); setError(''); const prompt = "Suggest three concise, professional calendar event titles for a block of personal focus time. Examples: 'Deep Work', 'Strategic Planning', 'No Meetings'. Return as a comma-separated list."; const suggestions = await callGeminiAPI(prompt, token); const firstSuggestion = suggestions.split(',')[0].replace(/"/g, '').trim(); if (firstSuggestion && !firstSuggestion.toLowerCase().includes('error') && !firstSuggestion.toLowerCase().includes('sorry')) { setTitle(firstSuggestion); } else { console.error("AI Title Suggestion failed:", suggestions); setError(suggestions); } setIsSuggesting(false);
        };
        return ( <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-30 p-4"><div className="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-2xl w-full max-w-md"><h3 className="text-2xl font-bold mb-6 dark:text-white">Create Temporal Boundary</h3><form onSubmit={handleSubmit} className="space-y-4"><div><label htmlFor="title" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Title</label><div className="flex gap-2 mt-1"><input type="text" id="title" value={title} onChange={e => setTitle(e.target.value)} placeholder='"Family Time"' className="flex-grow bg-gray-100 dark:bg-gray-700 border-gray-300 dark:border-gray-600 rounded-lg shadow-sm p-3 focus:ring-blue-500 focus:border-blue-500 dark:text-white" /><button type="button" onClick={handleSuggestTitle} disabled={isSuggesting || isCreating} className="px-3 py-2 text-sm font-semibold bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:bg-purple-400 dark:disabled:bg-purple-800 transition-colors">âœ¨ {isSuggesting ? '...' : 'Suggest'}</button></div></div><div><label htmlFor="date" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Date</label><input type="date" id="date" value={date} onChange={e => setDate(e.target.value)} disabled={isCreating} className="mt-1 block w-full bg-gray-100 dark:bg-gray-700 border-gray-300 dark:border-gray-600 rounded-lg shadow-sm p-3 focus:ring-blue-500 focus:border-blue-500 dark:text-white disabled:opacity-50" /></div><div className="flex gap-4"><div className="flex-1"><label htmlFor="start" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Start Time</label><input type="time" id="start" value={startTime} onChange={e => setStartTime(e.target.value)} disabled={isCreating} className="mt-1 block w-full bg-gray-100 dark:bg-gray-700 border-gray-300 dark:border-gray-600 rounded-lg shadow-sm p-3 focus:ring-blue-500 focus:border-blue-500 dark:text-white disabled:opacity-50" /></div><div className="flex-1"><label htmlFor="end" className="block text-sm font-medium text-gray-700 dark:text-gray-300">End Time</label><input type="time" id="end" value={endTime} onChange={e => setEndTime(e.target.value)} disabled={isCreating} className="mt-1 block w-full bg-gray-100 dark:bg-gray-700 border-gray-300 dark:border-gray-600 rounded-lg shadow-sm p-3 focus:ring-blue-500 focus:border-blue-500 dark:text-white disabled:opacity-50" /></div></div>{error && <p className="text-red-500 text-sm bg-red-100 dark:bg-red-900/50 p-3 rounded-lg">{error}</p>}<div className="flex justify-end gap-4 pt-4"><button type="button" onClick={onClose} disabled={isCreating} className="px-5 py-2.5 text-sm font-semibold bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50">Cancel</button><button type="submit" disabled={isCreating} className="px-5 py-2.5 text-sm font-semibold bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-blue-400 dark:disabled:bg-blue-800">{isCreating ? 'Creating...' : 'Create Block'}</button></div></form></div></div>);
    };